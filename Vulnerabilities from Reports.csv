Project;Auditor;Date;Language;Security Level;Status;Vulnerability details;Type;Subtype
TonUP;TonBit;2023-05;Tact;Minor;Fixed;Unintuitive judgment conditions in the claim function inconsistent with the finalize function;Common Errors;Logical Errors
TonUP;TonBit;2023-05;Tact;Informational;Fixed;Unnecessary transaction initiation when no new unlocks are available (jetton_claim_amount - already_claimed = 0).;Gas Control;Moderate Handling of Gas
TonUP;TonBit;2023-05;Tact;Medium;Fixed;Missing distribution_complete check in the launch_successful condition causing repeated calls to the distribute function.;Common Errors;Logical Errors
TonUP;TonBit;2023-05;Tact;Medium;Fixed;Unexpected abort in the withdraw dust function due to insufficient subtraction of myBalance.;Common Errors;Logical Errors
TonUP;TonBit;2023-05;Tact;Minor;Fixed;Missing time check for start_time and end_time in the SetLauncherConfig function.;Common Errors;Logical Errors
TonUP;TonBit;2023-05;Tact;Minor;Fixed;Incorrect event emit in SetTokenWalletAddress and SetUpWalletAddress functions.;Common Errors;Logical Errors
TON Locker Contract;Quantstamp;2023-07;FunC;Minor;Acknowledged;Missing validation for `vesting_total_duration` in `locker.load_data()`. Consider checking `vesting_total_duration > 0`.;Contract Design;Input Data Processing
TON Locker Contract;Quantstamp;2023-07;FunC;Minor;Acknowledged;Time constraints on rewards and deposits can lead to unfair distribution. Consider implementing a shorter time limit for reward distribution.;Common Errors;Logical Errors
TON Locker Contract;Quantstamp;2023-07;FunC;Minor;Acknowledged;Potential storage fee insufficiency in `locker_bill` contract. Consider limiting `vesting_start_time + vesting_total_duration`.;Gas Control;Moderate Handling of Gas
TON Locker Contract;Quantstamp;2023-07;FunC;Minor;Acknowledged;Overflow and division by zero errors in edge cases. Consider adding validations for `unlock_period`;Common Errors;Logical Errors
TON Locker Contract;Quantstamp;2023-07;FunC;Minor;Acknowledged;Risk of capital inefficiency in reward-lacking deposits. Consider preventing deposits if no reward is added.;Common Errors;Logical Errors
TON Locker Contract;Quantstamp;2023-07;FunC;Informational;Acknowledged;Inefficiency in reward reservation within the `locker` contract. Consider limiting reserved TON by checking the balance first.;Gas Control;Moderate Handling of Gas
TON Locker Contract;Quantstamp;2023-07;FunC;Informational;Acknowledged;Redundant checks of immutable values in `load_data()`. Consider executing checks only once.;Best Practices;Code Review
TON Locker Contract;Quantstamp;2023-07;FunC;Informational;Acknowledged;Lack of documentation for minor business logic. Consider documenting reward and deposit handling in `README.md`.;Best Practices;Documentation
Hipo Finance;Daniil Sedov;2023-10;FunC and TypeScript;Minor;Resolved;The JettonWallet smart contract allows for the withdrawal of surplus Toncoin but does not offer the capability to withdraw stuck Jettons. It is recommended to incorporate this feature for enhanced security.;Common Errors;Smart Contract Updates
Hipo Finance;Daniil Sedov;2023-10;FunC and TypeScript;Informational;Resolved;The majority of functions in utils.fc are marked with the impure specifier which isn't appropriate. Only functions that alter the contract's state should be designated as impure.;Possible Errors in FunC;Modifying Variables
Hipo Finance;Daniil Sedov;2023-10;FunC and TypeScript;Informational;Resolved;Within the recv_internal function in treasury.fc there's a retrieval of a slice with 66 zero bits using skip_bits, which expends gas. This can be optimized using an asm function.;Common Errors;Parsing and Serialization
Hipo Finance;Daniil Sedov;2023-10;FunC and TypeScript;Informational;Resolved;The opcodes for new operations appear to be miscalculated in relation to the established standards. For example, the opcode for deposit_coins should be 0x103af428 but is displayed as 0x1375a585.;Common Errors;Logical Errors
Hipo Finance;ScaleBit;2023-11;Func;Major;Pending;Centralization risk due to single administrator account controlling resource storage and modification.;Contract Design;Contract Design and Centralization
Hipo Finance;ScaleBit;2023-11;Func;Informational;Pending;Insufficient documentation comments in some functions reducing code readability and maintainability;Best Practices;Documentation
Hipo Finance;ScaleBit;2023-11;Func;Informational;Pending;Unnecessary variable definition and calculation in the deposit_coins function leading to gas inefficiency.;Gas Control;Moderate Handling of Gas
Hipo Finance;ScaleBit;2023-11;Func;Minor;Pending;Redundant impure specifier in return value type functions as they do not have side effects.;Possible Errors in FunC;Function Modifiers
TON Multisignature Wallet;Chainsulting;2024-02;FunC;Informational;Acknowledged;Missing development environment including separation of contracts and wrapper or the existence of unit tests.;Best Practices;Documentation
hTON (Hipo staking protocol);ProgramCrafter;2024-03;FunC;Critical;Resolved;If there remain no more coins, then tokens are zeroed out but total_unstaking is not. This can lead to issues.;Common Errors;Logical Errors
hTON (Hipo staking protocol);ProgramCrafter;2024-03;FunC;Informational;Resolved;"TEP-85 calls SBT destruction by central authority ""revocation"". Bills should use that including recording the revocation time for stats.";Best Practices;Documentation
hTON (Hipo staking protocol);ProgramCrafter;2024-03;FunC;Medium;Resolved;Bill doesn't check if it's active when receiving burn request, which could lead to responding twice to burn requests.;Contract Design;Input Data Processing
hTON (Hipo staking protocol);ProgramCrafter;2024-03;FunC;Minor;Resolved;Jetton wallet doesn't validate that forward_payload is in a reference if bit in Either is 1. Better to add validation.;Common Errors;Parsing and Serialization
hTON (Hipo staking protocol);ProgramCrafter;2024-03;FunC;Medium;Resolved;Jetton wallet doesn't check if recipient is in basechain and doesn't use recipient workchain when calculating forward fee.;Contract Design;Input Data Processing
hTON (Hipo staking protocol);ProgramCrafter;2024-03;FunC;Medium;Withdrawn;Checks in jetton wallet on lines 48-50 do not make sense. Suggest replacing with a check for sufficient fee.;Gas Control;Moderate Handling of Gas
hTON (Hipo staking protocol);ProgramCrafter;2024-03;FunC;Minor;Resolved;"Jetton wallet doesn't allow sending 0 tokens, throwing an error ""err::insufficient_funds"". This can be used to initialize jetton wallet.";Common Errors;Logical Errors
hTON (Hipo staking protocol);ProgramCrafter;2024-03;FunC;Major;Resolved;"Jetton reception can fail on action phase if destination jetton wallet has a large storage fee due. Forward notification should use ""send::ignore_errors"".";Contract Design;Message Generation and Handling
hTON (Hipo staking protocol);ProgramCrafter;2024-03;FunC;Minor;Resolved;Suggest indicating relationships between token variables in TL-B scheme for better clarity.;Best Practices;Documentation
XTON Core;Softstack.io;2024-03;FunC and Solidity;Medium;Acknowledged;Partial execution of transactions due to premature token deduction without ensuring transaction success;Common Errors;Carry-Value Pattern
XTON Core;Softstack.io;2024-03;FunC and Solidity;Medium;Acknowledged;Inability to recover ETH in recoverAnyTokens function;Common Errors;Sending Messages from Loops
XTON Core;Softstack.io;2024-03;FunC and Solidity;Medium;Acknowledged;Precision loss in claimableTokens function due to division before multiplication;Common Errors;Logical Errors
XTON Core;Softstack.io;2024-03;FunC and Solidity;Minor;Acknowledged;Lack of input validation for _tg_address in depositFor function;Contract Design;Input Data Processing
XTON Core;Softstack.io;2024-03;FunC and Solidity;Informational;Acknowledged;Inconsistent Solidity pragma directives across contracts;Best Practices;Compliance with Standards
TRC404;TonBit;2024-04;FunC;Medium;Fixed;Incorrect Calculation of fwd_fee in `common_message.fc`.;Common Errors;Logical Errors
TRC404;TonBit;2024-04;FunC;Major;Acknowledged;Centralization risk in `trc404_master.fc`: Admin can mint unlimited Jetton tokens.;Contract Design;Contract Design and Centralization
TRC404;TonBit;2024-04;FunC;Minor;Fixed;Conflict with Jetton Standard in `trc404_master.fc` and `trc404_wallet.fc`.;Best Practices;Compliance with Standards
TRC404;TonBit;2024-04;FunC;Minor;Acknowledged;NFT Content Error in `trc404_nftCollection.fc`: Incorrect return of `individual_nft_content`.;Common Errors;Restrictions on Data Recording
TRC404;TonBit;2024-04;FunC;Critical;Fixed;Jetton Balance Calculation Error in `trc404_wallet.fc`.;Common Errors;Logical Errors
TRC404;TonBit;2024-04;FunC;Major;Partially Fixed;No Handling of Bounced Messages in `trc404_wallet.fc`.;Common Errors;Bounced Message Handlers
TRC404;TonBit;2024-04;FunC;Medium;Fixed;Incorrect Gas Calculations in `trc404_wallet.fc`.;Gas Control;Moderate Handling of Gas
TRC404;TonBit;2024-04;FunC;Medium;Fixed;Ignored Gas Fee in `trc404_wallet.fc`.;Gas Control;Moderate Handling of Gas
TRC404;TonBit;2024-04;FunC;Medium;Fixed;Manipulable NFT Level in `trc404_nftItem.fc`.;Random Number Generation in TON;Safe Randomness Generation
ThunderFinance;TonBit;2024-05;Tact;Medium;Fixed;Rewards for Users not Present in JettonMasterChef cannot be Extracted;Contract Design;Contract Design and Centralization
ThunderFinance;TonBit;2024-05;Tact;Informational;Fixed;Duplicate Code in JettonMasterChef;Common Errors;Logical Errors
ThunderFinance;TonBit;2024-05;Tact;Informational;Fixed;Unused receive() function in JettonMasterChef;Common Errors;Logical Errors
ThunderFinance;TonBit;2024-05;Tact;Minor;Fixed;Unused Field thunderMintJettonWallet in Messages;Common Errors;Logical Errors
ThunderFinance;TonBit;2024-05;Tact;Informational;Fixed;Message Repeat Definition in JettonWallet and Messages;Common Errors;Logical Errors
ThunderFinance;TonBit;2024-05;Tact;Critical;Fixed;Logic Flaw in LP Supply Adjustment in TraitMasterChef;Common Errors;Logical Errors
ThunderFinance;TonBit;2024-05;Tact;Minor;Fixed;Unchecked Start and End Times in TraitMasterChef;Contract Design;Input Data Processing
ThunderFinance;TonBit;2024-05;Tact;Medium;Fixed;Maliciously Initialisable Contracts in TonMasterChef;Contract Design;Authorization Checks
ThunderFinance;TonBit;2024-05;Tact;Medium;Fixed;Uncalculated Gas and Unprocessed Bounce in MasterChef Contracts;Gas Control;Moderate Handling of Gas
ThunderFinance;TonBit;2024-05;Tact;Minor;Fixed;Inconsistent Handling of Contracts for Return in TonMasterChef;Contract Design;Partial Execution of Transactions
ThunderFinance;TonBit;2024-05;Tact;Minor;Fixed;Mismatch of Judgement Conditions in MasterChef Contracts;Common Errors;Logical Errors
ThunderFinance;TonBit;2024-05;Tact;Minor;Fixed;Redundant Field createdAt in MasterChef Contracts;Common Errors;Logical Errors
Tradoor;TonBit;2024-05;Tact;Medium;Fixed;Compensation Mechanisms May Introduce Centralization Risks;Contract Design;Contract Design and Centralization
Tradoor;TonBit;2024-05;Tact;Major;Fixed;The protocolTradingFee Can't Be Withdrawn;Common Errors;Logical Errors
Tradoor;TonBit;2024-05;Tact;Major;Fixed;Never Updated Variable unrealizedPnl in GlobalLPPosition;Common Errors;Logical Errors
Tradoor;TonBit;2024-05;Tact;Major;Fixed;The Calculation Error when Updating Unrealized Profit and Loss;Common Errors;Logical Errors
Tradoor;TonBit;2024-05;Tact;Major;Fixed;The RrevPremiumRate Does Not Match With Token Type;Common Errors;Logical Errors
Tradoor;TonBit;2024-05;Tact;Major;Fixed;Update Global Liquidity Using Wrong Variable;Common Errors;Logical Errors
Tradoor;TonBit;2024-05;Tact;Medium;Fixed;The Variable Clamped Funding Rate Delt Is Not Used;Common Errors;Logical Errors
Tradoor;TonBit;2024-05;Tact;Medium;Fixed;Bonus Calculation Formula Errors And Discrepancies;Common Errors;Logical Errors
Tradoor;TonBit;2024-05;Tact;Minor;Fixed;Meaningless If Statement;Common Errors;Logical Errors
Tradoor;TonBit;2024-05;Tact;Minor;Fixed;Redundant Code;Common Errors;Logical Errors
Tradoor;TonBit;2024-05;Tact;Minor;Fixed;Calculation Without Adding Funding Fee;Common Errors;Logical Errors
Tradoor;TonBit;2024-05;Tact;Minor;Fixed;Returns Incorrect Check Information;Common Errors;Logical Errors
Tradoor;TonBit;2024-05;Tact;Informational;Fixed;Variable That Can Not Be Updated;Common Errors;Logical Errors
EVAA;Quantstamp;2024-06;FunC;Major;Mitigated;Function update_full_config_process() and Debug Code Gives Excessive Power to the Admin;Contract Design;Authorization Checks
EVAA;Quantstamp;2024-06;FunC;Medium;Fixed;Risk of Uncaught Unexpected Errors on Multi-Contract Flows with No Rollback of Latest State Updates Can Lead to Inconsistent State Storages or Funds Locked;Contract Design;Message Generation and Handling
EVAA;Quantstamp;2024-06;FunC;Medium;Fixed;Missing Input Validations;Contract Design;Input Data Processing
EVAA;Quantstamp;2024-06;FunC;Medium;Acknowledged;Possible Unfair Race Conditions Between Borrowers and Liquidators when the System Is Activated Again;Asynchronous Execution;Key Considerations
EVAA;Quantstamp;2024-06;FunC;Medium;Acknowledged;Users with Liquidatable Positions Might Be Blocked From Repaying;Contract Design;Authorization Checks
EVAA;Quantstamp;2024-06;FunC;Medium;Fixed;Incorrect Amount Returned by calculate_maximum_withdraw_amount();Common Errors;Logical Errors
EVAA;Quantstamp;2024-06;FunC;Minor;Fixed;[False Positive];Common Errors;Logical Errors
EVAA;Quantstamp;2024-06;FunC;Minor;Fixed;Incorrect Message Mode Lets Anyone Drain Available Native Tokens From Any User Contract;Contract Design;Input Data Processing
EVAA;Quantstamp;2024-06;FunC;Minor;Fixed;Event Management Could Be Improved;Best Practices;Documentation
EVAA;Quantstamp;2024-06;FunC;Minor;Fixed;Suggestion to Add Invariant Checks to Fail if Unexpected Edge Cases Happen;Best Practices;Documentation
EVAA;Quantstamp;2024-06;FunC;Minor;Fixed;Unclear Usage of Variable dust;Best Practices;Magic Numbers-Flags-and Constants
EVAA;Quantstamp;2024-06;FunC;Informational;Acknowledged;Concurrent Operations Exposed to Race Conditions;Asynchronous Execution;Key Considerations
EVAA;Quantstamp;2024-06;FunC;Informational;Fixed;Any Address Can Lock for a Short Period the User Contract of Another User by Supplying a Minimum Amount on Its Behalf;Contract Design;Authorization Checks
EVAA;Quantstamp;2024-06;FunC;Informational;Fixed;Recommended Usage of end_parse();Common Errors;Parsing and Serialization
EVAA;Quantstamp;2024-06;FunC;Informational;Acknowledged;Getters Do Not Return Information About the Validity of prices_packed;Best Practices;Documentation
EVAA;Quantstamp;2024-06;FunC;Informational;Fixed;Unclear Fee Management;Common Errors;Logical Errors
EVAA;Quantstamp;2024-06;FunC;Informational;Acknowledged;General Risks Related to Using Price Oracles;Contract Design;Contract Design and Centralization
EVAA;Quantstamp;2024-06;FunC;Informational;Fixed;Mismatch Between Comments in Liquidation and Supply Functions;Best Practices;Documentation
EVAA;Quantstamp;2024-06;FunC;Undetermined;Acknowledged;Impact of Deprecating Assets;Contract Design;Contract Design and Centralization
EVAA;Quantstamp;2024-06;FunC;Undetermined;Fixed;Each Muldiv Operation Could Explicitly Force a Round-up or Round-Down Based on the Context to Make the Behavior of the Code More Explicit and Controlled;Common Errors;Logical Errors
EVAA;Quantstamp;2024-06;FunC;Undetermined;Fixed;Usage of impure Specifier;Possible Errors in FunC;Modifying Variables
EVAA;Quantstamp;2024-06;FunC;Undetermined;Fixed;Supply and Borrow Rates Might Be Outdated in Multiple Situations;Common Errors;Logical Errors
EVAA;Quantstamp;2024-06;FunC;Undetermined;Fixed;Missing Config Validation After Code Upgrade;Common Errors;Logical Errors
EVAA;Quantstamp;2024-06;FunC;Undetermined;Fixed;Production Readiness of the Codebase;Best Practices;Code Review
EVAA;Quantstamp;2024-06;FunC;Undetermined;Acknowledged;Liquidators Are Incentivized to Perform More Smaller Liquidations to Get More Collateral Rewards;Contract Design;Contract Design and Centralization
EVAA;Quantstamp;2024-06;FunC;Undetermined;Fixed;[Self-Identified] Tracking Indexes Calculated Based on New Total Supply and Borrow;Common Errors;Logical Errors
EVAA;Quantstamp;2024-06;FunC;Undetermined;Fixed;[Self-Identified] Repayments Can Be Blocked Due to the Current Max Cap Check;Common Errors;Logical Errors
EVAA;Quantstamp;2024-06;FunC;Undetermined;Fixed;[Self-Identified] Global Tracking Indexes Not Updated when Updating Tracking Speed Config Parameters;Common Errors;Logical Errors
EVAA;Quantstamp;2024-06;FunC;Undetermined;Fixed;[Self-Identified] Insufficient Validations of Messages Received From user.sc;Contract Design;Input Data Processing
EVAA;Quantstamp;2024-06;FunC;Undetermined;Fixed;[Self-Identified] Incorrect Message Body Parsed when Dealing with Reverted Operations;Common Errors;Parsing and Serialization
EVAA;Quantstamp;2024-06;FunC;Undetermined;Fixed;[Self-Identified] Adding New Tokens Reverts Due to Incorrect Sequence of Operations;Common Errors;Logical Errors
EVAA;Quantstamp;2024-06;FunC;Undetermined;Fixed;[Self-Identified] Supply Cap Check Can Be Bypassed;Asynchronous Execution;Key Considerations
Aqua Protocol;Beosin;2024-07;FunC;Major;Fixed;The on_bounce function is poorly designed leading to residual data in ctx::redeem_data if redeem_tick messages fail.;Contract Design;Partial Execution of Transactions
Aqua Protocol;Beosin;2024-07;FunC;Medium;Fixed;Incorrect asset_address import location in redeem_tick function causing mismatched asset data;Common Errors;Parsing and Serialization
Aqua Protocol;Beosin;2024-07;FunC;Minor;Fixed;The mint function lacks permission checking allowing unauthorized token minting;Contract Design;Authorization Checks
Aqua Protocol;Beosin;2024-07;FunC;Informational;Fixed;Error message inconsistency in wallet_balance handling causing confusion.;Best Practices;Documentation
Aqua Protocol;Beosin;2024-07;FunC;Informational;Fixed;Redundant code in withdraw_request function double-counting wallet_address.;Best Practices;Documentation
Storm Trade;Quantstamp;2024-07;FunC;Minor;Fixed;Race Condition in Bounce Messages Handling Lead to Overwritten Balances;Asynchronous Execution;Key Considerations
Storm Trade;Quantstamp;2024-07;FunC;Minor;Fixed;LP Token Rate Missing Update on Bounce;Common Errors;Bounced Message Handlers
Storm Trade;Quantstamp;2024-07;FunC;Minor;Fixed;Double Reserve in vault Can Lead to Transaction Failure;Common Errors;Logical Errors
Storm Trade;Quantstamp;2024-07;FunC;Informational;Mitigated;Missing Input Validation;Contract Design;Input Data Processing
Storm Trade;Quantstamp;2024-07;FunC;Informational;Acknowledged;Follow best practices such as removing unused variables and ensuring consistent code practices. ;Best Practices;Compliance with Standards
Storm Trade;Quantstamp;2024-07;FunC;Informational;Mitigated;Re-Declaration of Existing Constants and Errors;Best Practices;Code Review
Storm Trade;Quantstamp;2024-07;FunC;Medium;Mitigated;Attackers Can Profit by Creating Repeated Long or Short Positions Using Known Oracle Prices;Common Errors;Public Nature of Blockchain
Storm Trade;Quantstamp;2024-07;FunC;Medium;Fixed;Replay Attack to Close or Open Market Unexpectedly;Common Errors;Replay Attack
Storm Trade;Quantstamp;2024-07;FunC;Medium;Fixed;No Support for Withdrawing Native Buffer;Common Errors;Logical Errors
Storm Trade;Quantstamp;2024-07;FunC;Minor;Fixed;Executor and Referral Rewards Can Be Lost After Vault Updates Due to a Race Condition;Asynchronous Execution;Key Considerations
Bool Network;TonBit;2024-07;FunC;Critical;Fixed;Emit Forged Message: An attacker can forge messages to manipulate assets by exploiting anchor registration.;Contract Design;Authorization Checks
Bool Network;TonBit;2024-07;FunC;Minor;Fixed;Redundant Exception Throwing: The handle_emit_event() function has redundant topic value checks.;Contract Design;Logical Errors
Bool Network;TonBit;2024-07;FunC;Minor;Fixed;Lack of Events Emit: The contract lacks appropriate events for monitoring sensitive operations, making it difficult to track actions.;Contract Design;Contract Design and Centralization
Bool Network;TonBit;2024-07;FunC;Minor;Fixed;The enable_global_path function Lacks Permission Validation: Anyone can add a new chain_id, consuming storage and increasing gas costs.;Contract Design;Authorization Checks
Bool Network;TonBit;2024-07;FunC;Medium;Fixed;Lack of Native Token Swap Limit Check: No check on the number of tokens for native token swaps.;Contract Design;Input Data Processing
Bool Network;TonBit;2024-07;FunC;Minor;Fixed;Incorrect Exception Throwing: Exception throwing is misplaced in integer operations.;Contract Design;Logical Errors
Bool Network;TonBit;2024-07;FunC;Minor;Fixed;Error Code Not Used: Unused error codes and misuse of error codes in call_back_from_swap_consumer.;Best Practices;Code Review
Bool Network;TonBit;2024-07;FunC;Minor;Fixed;Calculating Gas Consumption without Checking for Sufficiency: Gas consumption calculations do not account for insufficient gas.;Contract Design;Partial Execution of Transactions
Bool Network;TonBit;2024-07;FunC;Major;Fixed;Incorrect Permission of Setting Rates: Lack of permission checks allows anyone to modify pool rates.;Contract Design;Authorization Checks
Bool Network;TonBit;2024-07;FunC;Major;Fixed;Taking Out More Liquidity than Reserve May Result in A Loss of Assets: Removing liquidity greater than the reserve can cause asset desynchronization.;Contract Design;Logical Errors
Bool Network;TonBit;2024-07;FunC;Medium;Fixed;Changing Token Types Causes Asset Errors: Changing token types without updating position information can lead to fund loss.;Contract Design;Logical Errors
Bool Network;TonBit;2024-07;FunC;Medium;Fixed;Incorrect Judgement: Adjusted amount and fee are incorrectly judged in the handle_swap_out function.;Contract Design;Logical Errors
MiniTon;TonBit;2024-07;Tact;Medium;Fixed;Continuing to Execute Trades when Commission Collection Fails.;Contract Design;Contract Design and Centralization
MiniTon;TonBit;2024-07;Tact;Medium;Partially Fixed;Centralization Risk: Contract owner can withdraw all assets.;Contract Design;Contract Design and Centralization
MiniTon;TonBit;2024-07;Tact;Minor;Acknowledged;Failure to Judge Gas Charges in Advance.;Gas Control;Moderate Handling of Gas
MiniTon;TonBit;2024-07;Tact;Minor;Fixed;Lack of Events Emit for sensitive operations.;Best Practices;Documentation
MiniTon;TonBit;2024-07;Tact;Minor;Fixed;Meaningless Variable: Unused variable in VoteMsg function.;Common Errors;Logical Errors
MiniTon;TonBit;2024-07;Tact;Informational;Fixed;Code Optimisation: Simplifying if statements for better readability.;Best Practices;Code Review
Catizen;TonBit;2024-08;Tact;Informational;Acknowledged;Lack of Permission Check and Parameter Validation in SignAction1 and SignAction2 functions;Contract Design;Authorization Checks
Catizen;TonBit;2024-08;Tact;Informational;Acknowledged;"Unused variable `ctx: Context = context();` in SignAction1 and SignAction2 functions";Common Errors;Logical Errors
Catizen Jetton;TonBit;2024-08;FunC;Medium;Fixed;Centralization risk identified in the smart contract. The admin can mint any amount of jetton tokens through mint message.;Contract Design;Contract Design and Centralization
One Click Sender;TonBit;2024-08;FunC;Major;Fixed;Excess Fee Issue in Message Handling: When handling op::send_ton messages, the contract sends the full cost instead of the modified_cost, resulting in excess fees.;Contract Design;Authorization Checks
One Click Sender;TonBit;2024-08;FunC;Major;Fixed;Missing Parameter Validation: Parameters like has_referral and referral are not validated, allowing users to manipulate them and disrupt the contract's logic.;Contract Design;Input Data Processing
Onton Finance;Beosin;2024-09;FunC;Major;Fixed;Failure of minimum liquidity setting in pool could lead to liquidity draining zero price manipulation and division by zero errors.;Common Errors;Logical Errors
Onton Finance;Beosin;2024-09;FunC;Major;Fixed;Incorrect query function message pattern allows anyone to retrieve the entire balance of the contract.;Common Errors;Logical Errors
Onton Finance;Beosin;2024-09;FunC;Major;Fixed;Mismatched message names causing message processing failure between contracts.;Contract Design;External Message Handling
Onton Finance;Beosin;2024-09;FunC;Medium;Fixed;Lack of rebound mechanism leading to user loss when message processing fails.;Contract Design;Partial Execution of Transactions
Onton Finance;Beosin;2024-09;FunC;Medium;Fixed;Loss when adding liquidity for the first time due to sending all liquidity to a black hole address.;Common Errors;Logical Errors
Onton Finance;Beosin;2024-09;FunC;Medium;Fixed;Lack of proportional adding interface when adding liquidity leading to user losses.;Common Errors;Logical Errors
Onton Finance;Beosin;2024-09;FunC;Minor;Fixed;Incorrect judgment conditions during swap logic leading to incorrect validation.;Common Errors;Logical Errors
Onton Finance;Beosin;2024-09;FunC;Minor;Fixed;Missing restrictions in swap_token function allowing swaps with insufficient liquidity;Common Errors;Logical Errors
Onton Finance;Beosin;2024-09;FunC;Minor;Fixed;On-chain query function calculation error for LP token amounts.;Contract Design;Logical Errors
Onton Finance;Beosin;2024-09;FunC;Minor;Fixed;Admin accounts cannot use query functions due to incorrect execution order.;Contract Design;Authorization Checks
Tonny;Beosin;2024-09;FunC;Minor;Fixed;Centralized risk: The contract owner retains the ability to mint tokens at any time which could lead to excessive issuance of tokens depleting the trading pool.;Contract Design;Contract Design and Centralization
Tonny;Beosin;2024-09;FunC;Informational;Acknowledged;The readability of the error message is low: Numbers are used to represent error messages making it difficult for users to understand their purpose;Best Practices;Documentation
Aqua Protocol;BugBlow;2024-09;FunC;Medium;Fixed;DoS via vaults: Unlimited storage in vaults can overwhelm the contract if compromised leading to resource exhaustion.;Gas Control;Moderate Handling of Gas
Aqua Protocol;BugBlow;2024-09;FunC;Medium;Fixed;Borrow rate manipulation: `now()` timestamp can be manipulated by miners and lack of negative growth check can alter borrowing rates.;Common Errors;Logical Errors
Aqua Protocol;BugBlow;2024-09;FunC;Minor;Fixed;Error confusion: Two distinct errors share the same error code leading to potential incorrect error handling.;Common Errors;Exit Codes
Aqua Protocol;BugBlow;2024-09;FunC;Critical;Not Fixed;Price manipulation with a Replay Attack: Attacker can copy past Oracle prices data and send it repeatedly within 120 seconds tricking the contract into using stale prices.;Common Errors;Replay Attack
Aqua Protocol;BugBlow;2024-09;FunC;Major;Not Fixed;Single point of trust: Contract fully trusts data from a single Oracle source making it vulnerable if the Oracle is compromised or malicious.;Contract Design;Contract Design and Centralization
Aqua Protocol;BugBlow;2024-09;FunC;Critical;Fixed;An attacker can replay stale Oracle data within a 120-second window manipulating collateral prices and minting excessive AquaUSD.;Common Errors;Replay Attack
Aqua Protocol;BugBlow;2024-09;FunC;Major;Acknowledged;The contract relies on a single Oracle making it vulnerable to manipulation if the Oracle is compromised.;Contract Design;Contract Design and Centralization
Aqua Protocol;BugBlow;2024-09;FunC;Medium;Fixed;Unlimited vault storage can lead to storage exhaustion and contract freezing.;Gas Control;Moderate Handling of Gas
Aqua Protocol;BugBlow;2024-09;FunC;Medium;Fixed;The borrow rate calculation is vulnerable to timestamp manipulation by miners.;Common Errors;Logical Errors
Aqua Protocol;BugBlow;2024-09;FunC;Minor;Fixed;Two distinct errors share the same error code leading to potential confusion.;Common Errors;Exit Codes
Grishmans Kombat;HashEx Blockchain Security;2024-09;FunC;Critical;Resolved;The claim() function does not impose any limits or validations on the amount a user can claim, potentially depleting the Vault's Jetton balance.;Contract Design;Authorization Checks
Grishmans Kombat;HashEx Blockchain Security;2024-09;FunC;Major;Resolved;The code lacks accompanying tests, and the token interaction scripts are outdated.;Best Practices;Documentation
Grishmans Kombat;HashEx Blockchain Security;2024-09;FunC;Minor;Resolved;Several variables are declared but never used in the contract.;Best Practices;Documentation
Grishmans Kombat;HashEx Blockchain Security;2024-09;FunC;Minor;Resolved;The load_data() function is declared impure but does not modify the state.;Best Practices;Documentation
Grishmans Kombat;HashEx Blockchain Security;2024-09;FunC;Minor;Resolved;The jetton_wallet_address variable is set on every transfer notification unnecessarily.;Best Practices;Documentation
Grishmans Kombat;HashEx Blockchain Security;2024-09;FunC;Minor;Resolved;The recv_internal() function makes an unnecessary call to save_data() in the owner_withdraw_jetton handler.;Best Practices;Code Review
Grishmans Kombat;HashEx Blockchain Security;2024-09;FunC;Informational;Acknowledged;Updating the Merkle root invalidates unclaimed airdrops from the previous tree.;Common Errors;Logical Errors
Grishmans Kombat;HashEx Blockchain Security;2024-09;FunC;Informational;Resolved;The owner_withdraw_jetton handler duplicates code that could be replaced by the send_tokens() function.;Best Practices;Compliance with Standards
Grishmans Kombat;HashEx Blockchain Security;2024-09;FunC;Major;Resolved;The Vault sets jetton_wallet_address without verifying the sender's authenticity, allowing potential hijacking.;Contract Design;Authorization Checks
Rhino.fi;Quantstamp;2024-09;FunC;Minor;Fixed;Potential for Lost Funds in Jetton Deposit due to missing forward_payload;Common Errors;Logical Errors
Rhino.fi;Quantstamp;2024-09;FunC;Informational;Acknowledged;Bounceable Message Sent Despite No Processing of Such in send_jetton();Common Errors;Bounced Message Handlers
Rhino.fi;Quantstamp;2024-09;FunC;Informational;Fixed;Missing Input Validation in upgrade and bridge_contract functions;Contract Design;Input Data Processing
Rhino.fi;Quantstamp;2024-09;FunC;Informational;Acknowledged;Needed Support for No-Ops in authorized address operations;Contract Design;Authorization Checks
Rhino.fi;Quantstamp;2024-09;FunC;Informational;Fixed;Critical Role Transfer Not Following Two-Step Pattern in transfer_ownership();Contract Design;Authorization Checks
Rhino.fi;Quantstamp;2024-09;FunC;Informational;Fixed;Stylistic Improvements needed in remove_dict_address_key_if_exists(), authorized_dict/authorized_list naming, and error handling;Best Practices;Code Review
SecondLive-Ton;TonBit;2024-09;FunC;Major;Acknowledged;The admin has the ability to mint change the admin call call_to() and upgrade the contract which introduces centralization risks. Code Location: contracts/jetton-minter.fc#227-234;Contract Design;Contract Design and Centralization
Ton Staking Protocol;TonBit;2024-09;Tact;Medium;Acknowledged;Missing Pause Function - The contract contains multiple pause checks but lacks the pause functionality.;Contract Design;Authorization Checks
Ton Staking Protocol;TonBit;2024-09;Tact;Medium;Acknowledged;Single-step Ownership Transfer Can be Dangerous - Single-step ownership transfer risks losing ownership if a wrong address is passed.;Contract Design;Authorization Checks
Ton Staking Protocol;TonBit;2024-09;Tact;Minor;Acknowledged;Lack of Parameter Validation - The MsgSetStart message lacks validation to ensure the end time is greater than the start time.;Contract Design;Input Data Processing
InterBridge-Ton;Beosin;2024-10;FunC;Informational;Fixed;Event Error: Incorrect event trigger in withdraw_liquidity.fc (LOG_ADD_LIQUIDITY instead of LOG_WITHDRAW_LIQUIDITY).;Best Practices;Documentation
InterBridge-Ton;Beosin;2024-10;FunC;Informational;Fixed;Redundant code in bridge_out_ft.fc and bridge_out_ton.fc (route_hash not used).;Best Practices;Documentation
InterBridge-Ton;Beosin;2024-10;FunC;Critical;Fixed;Missing permission check in relayer_execute_bridge function. Funds in the vault contract could be maliciously withdrawn.;Contract Design;Authorization Checks
InterBridge-Ton;Beosin;2024-10;FunC;Minor;Fixed;Centralization Risk: Reliance on a single relayer for cross-chain operations. If attacked funds in the vault could be extracted.;Contract Design;Contract Design and Centralization
InterBridge-Ton;Beosin;2024-10;FunC;Informational;Fixed;Event Error: Incorrect event trigger in withdraw_liquidity.fc (LOG_ADD_LIQUIDITY instead of LOG_WITHDRAW_LIQUIDITY).;Best Practices;Documentation
InterBridge-Ton;Beosin;2024-10;FunC;Informational;Fixed;Redundant code in bridge_out_ft.fc and bridge_out_ton.fc (route_hash not used).;Best Practices;Documentation
InterBridge-Ton;Beosin;2024-10;FunC;Critical;Fixed;Missing permission check in relayer_execute_bridge function. Funds in the vault contract could be maliciously withdrawn.;Contract Design;Authorization Checks
InterBridge-Ton;Beosin;2024-10;FunC;Minor;Fixed;Centralization Risk: Reliance on a single relayer for cross-chain operations. If attacked funds in the vault could be extracted.;Contract Design;Contract Design and Centralization
BeaverLand;TonBit;2024-10;FunC;Medium;Acknowledged;Batch Transaction Execution Implementation: The external message in the FoundingVault contract allows users to execute multiple transactions simultaneously. Consider using Highload-wallet v3 implementation for other parts of the contract.;Contract Design;Partial Execution of Transactions
BeaverLand;TonBit;2024-10;FunC;Informational;Acknowledged;The Code Is Not Fully Implemented: The internal message in the FundingVault contract is not fully implemented yet. TODO comments indicate missing functionality such as nonce validation and transaction handling.;Common Errors;Logical Errors
TOM PUMP;TonBit;2024-10;FunC;Minor;Fixed;Precision Loss.;Common Errors;Logical Errors
TOM PUMP;TonBit;2024-10;FunC;Informational;Acknowledged;Storage in Jetton_minter Protocol.;Best Practices;Documentation
TOM PUMP;TonBit;2024-10;FunC;Major;Acknowledged;When token_reserves == 0 the User's Share Calculation is Incorrect.;Common Errors;Logical Errors
TOM PUMP;TonBit;2024-10;FunC;Medium;Acknowledged;The total_supply is Updated incorrectly when the First User Adds Liquidity.;Common Errors;Logical Errors
TOM PUMP;TonBit;2024-10;FunC;Major;Acknowledged;Removing Liquidity Lacks Slippage Protection.;Gas Control;Moderate Handling of Gas
TOM PUMP;TonBit;2024-10;FunC;Major;Acknowledged;Fee Omission Issue in dex_minter Swap Operations.;Gas Control;Moderate Handling of Gas
TOM PUMP;TonBit;2024-10;FunC;Medium;Acknowledged;The User cannot Receive all the Extra Assets.;Common Errors;Logical Errors
TOM PUMP;TonBit;2024-10;FunC;Medium;Acknowledged;Strict Liquidity Conditions Cause Transaction Failures.;Common Errors;Logical Errors
TOM PUMP;TonBit;2024-10;FunC;Major;Fixed;Proposed Fee Deductions for Minting.;Gas Control;Moderate Handling of Gas
TOM PUMP;TonBit;2024-10;FunC;Major;Acknowledged;Refunding Excess TON During Minting.;Gas Control;Moderate Handling of Gas
TOM PUMP;TonBit;2024-10;FunC;Major;Fixed;When op = burn the Protocol's Calculation of reserve_return is Incorrect;Common Errors;Logical Errors
TOM PUMP;TonBit;2024-10;FunC;Major;Fixed;Minting and Burning Lack Slippage Protection.;Gas Control;Moderate Handling of Gas
TOM PUMP;TonBit;2024-10;FunC;Major;Acknowledged;Centralization Risk.;Contract Design;Contract Design and Centralization
TOM PUMP;TonBit;2024-10;FunC;Medium;Acknowledged;Single-step Ownership Transfer Can be Dangerous.;Contract Design;Authorization Checks
TOM PUMP;TonBit;2024-10;FunC;Medium;Fixed;The Calculation of Tokens during Minting is Incorrect.;Common Errors;Logical Errors
UTonic;TonBit;2024-10;FunC;Medium;Fixed;Fee calculation error in the withdraw contract.;Common Errors;Logical Errors
UTonic;TonBit;2024-10;FunC;Major;Fixed;Centralization Risk: Admin can arbitrarily upgrade the contract and modify prices.;Contract Design;Contract Design and Centralization
UTonic;TonBit;2024-10;FunC;Major;Fixed;Front-running the price update allows users to consistently make a profit.;Common Errors;Logical Errors
UTonic;TonBit;2024-10;FunC;Medium;Fixed;Single-step ownership transfer can be dangerous if the wrong address is passed.;Contract Design;Authorization Checks
UTonic;TonBit;2024-10;FunC;Minor;Fixed;Restrict proxy_id to proxies capable of handling burn messages.;Contract Design;Authorization Checks
UTonic;TonBit;2024-10;FunC;Major;Fixed;Failure to refund user’s LST Ton on operation failure.;Contract Design;Partial Execution of Transactions
Hipo Finance;TonTech;2024-10;FunC;Minor;Unresolved;Potentially inconsistent timestamp calculation: The get_times function in treasury.fc may become invalid if elections_start_before and elections_end_before differ by less than 600 seconds.;Contract Design;Logical Errors
Hipo Finance;TonTech;2024-10;FunC;Minor;Resolved;Incorrect sort key calculation: The request_sort_key function in utils.fc may affect sorting order due to incorrect bit manipulation.;Contract Design;Logical Errors
Hipo Finance;TonTech;2024-10;FunC;Minor;Unresolved;Missing late participation check: The participate_in_election function in treasury.fc lacks a check to prevent late participation.;Contract Design;Authorization Checks
Hipo Finance;TonTech;2024-10;FunC;Minor;Resolved;Missing sender checks: The stake_coins and withdraw_tokens functions in wallet.fc do not check their sender.;Contract Design;Authorization Checks
Hipo Finance;TonTech;2024-10;FunC;Informational;Resolved;Extraneous impure modifiers: Some functions in utils.fc do not need the impure modifier.;Best Practices;Compliance with Standards
TONCO;Beosin;2024-11;Func;Minor;Acknowledged;Incentive calculation flaws: Asynchronous message processing may lead to incorrect reward calculations due to feeGrowthInside0X128 updates.;Asynchronous Execution;Key Considerations
TONCO;Beosin;2024-11;Func;Minor;Acknowledged;Lack of Lock function: The `is_locked` variable in the router contract is defined but lacks a function to modify it.;Common Errors;Smart Contract Update
TONCO;Beosin;2024-11;Func;Informational;Acknowledged;The pool can be initialized multiple times: No mechanism prevents repeated initialization, leading to inconsistent pool states.;Common Errors;Smart Contract Update
TONCO;Beosin;2024-11;Func;Informational;Acknowledged;Poor calibration: Lack of strict checking in swap and add liquidity functions may result in user fund loss.;Common Errors;Logical Errors
TONCO;Beosin;2024-11;Func;Informational;Acknowledged;Redundant code: Unused hash calculations in `getChildContracts` and `getPoolInitialData` functions.;Best Practices;Documentation
CryptoBillions;BugBlow;2024-11;FunC;Medium;acknowledged;Unfair distribution of shares due to integer division in share allocation formula. If jetton_amount < 10000/percent shareholder_amount results in 0.;Common Errors;Logical Errors
CryptoBillions;BugBlow;2024-11;FunC;Minor;acknowledged;Insufficient gas calculation for distribution transactions. Formula fails to account for cumulative gas consumption of all transfer transactions.;Gas Control;Moderate Handling of Gas
CryptoBillions;BugBlow;2024-11;FunC;Minor;Acknowledged;"Operation code mismatch between shareholder contract and jetton wallet. Extra ""0"" in the operation code causes potential issues.";Common Errors;Parsing and Serialization
FDUSD on TON;Quantstamp;2024-12;FunC;None;No;No;NA;NA
Boxing Star X Wallet;BugBlow;2025-02;FunC;Minor;Acknowledged;Excess gas is not returned to the sender leading to inefficiencies.;Gas Control;Moderate Handling of Gas
Boxing Star X Wallet;BugBlow;2025-02;FunC;Critical;Fixed;Missing validation in transfer_notification() allows unauthorized calls potentially fooling off-chain systems.;Contract Design;Authorization Checks
Boxing Star X Wallet;BugBlow;2025-02;FunC;Critical;Fixed;Single-price model for TON and Jetton implies 1:1 equivalence leading to under/overcharging.;Common Errors;Logical Errors
Boxing Star X Wallet;BugBlow;2025-02;FunC;Major;Acknowledged;Owner can change prices at the last moment causing buyers to pay more than expected.;Common Errors;Public Nature of Blockchain
Boxing Star X Wallet;BugBlow;2025-02;FunC;Medium;Acknowledged;No refund mechanism for overpayments or errors;Contract Design;Input Data Processing
Boxing Star X Wallet;BugBlow;2025-02;FunC;Medium;Fixed;Buying items with 0 quantity is allowed potentially exploiting off-chain logic.;Contract Design;Input Data Processing
Boxing Star X Wallet;BugBlow;2025-02;FunC;Minor;Fixed;Limited number of game items due to TON's cell and dictionary limitations.;Possible Errors in FunC;Storage Management
